//
// Copyright Â© 2022 Gili Labs. All rights reserved.
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// mach-exception
// machExceptionErrorBreakpoint.swift
// Created by Patrick Gili on 12/4/22.
//

import Foundation

public struct MachExceptionBreakpointInfo {
    
    /// The cause of the breakpoint exception.
    public let codes: MachExceptionBreakpointCodes
    
    internal init?(_ code: mach_exception_data_type_t?, _ subcode: mach_exception_data_type_t?) {
        guard let code = code, let subcode = subcode,
              let breakpointCode =  MachExceptionBreakpointCodes(code: code, subcode: subcode)
        else {
            return nil
        }
        self.codes = breakpointCode
    }
}
#if arch(arm) || arch(arm64)

internal let ARM_GDB_INSTR1: UInt64 = 0xe7ffdefe
internal let ARM_GDB_INSTR2: UInt64 = 0xe7ffdeff

public enum MachExceptionBreakpointCodes: Equatable {
    
    /// Processor encountered a breakpoint.
    case breakpoint(address: UInt64)
    
    /// Processor executed a breakpoint instruction (used by GDB).
    case gdbBreakpoint(instruction: UInt64)
    
    /// Processor encountered a watchpoint.
    case watchpoint(address: UInt64)
    
    /// Processor performed a single-step operation.
    case singleStep
    
    public init?(code: mach_exception_data_type_t, subcode: mach_exception_data_type_t) {
        let code = Int32(code)
        let subcode = UInt64(subcode)
        switch (code, subcode) {
        case (EXC_ARM_BREAKPOINT, 0): self = .singleStep
        case (EXC_ARM_BREAKPOINT, ARM_GDB_INSTR1): self = .gdbBreakpoint(instruction: subcode)
        case (EXC_ARM_BREAKPOINT, ARM_GDB_INSTR2): self = .gdbBreakpoint(instruction: subcode)
        case (EXC_ARM_BREAKPOINT, _): self = .breakpoint(address: subcode)
        case (EXC_ARM_DA_DEBUG, _): self = .watchpoint(address: subcode)
        default: return nil
        }
    }
}
#elseif arch(i386) || arch(x86_64)
public enum MachExceptionBreakpointCode: Equatable {
    
    /// BOUND instruction found an array index outside of specified bounds.
    case outOfBounds
    
    /// Debug exception occurred, which may signal one of the following conditions: instruction fetch breakpoint,
    /// data read or write breakpoint, I/O read or write breakpoint, general detect condition (generated by an
    /// in-circuit emulator), single-step, task-switch.
    case debug
    
    /// INT 3 instruction executed by processor.
    case breakpoint
    
    public init?(code: mach_exception_data_type_t, subcode: mach_exception_data_type_t) {
        let code = Int32(code)
        switch code {
        case EXC_I386_BOUND: self = .outOfBounds
        case EXC_I386_SGL: self = .debug
        case EXC_I386_BPT: self = .breakpoint
        default: return nil
        }
    }
}
#endif
